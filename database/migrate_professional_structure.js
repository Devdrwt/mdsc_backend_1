require('dotenv').config();
const { pool } = require('../src/config/database');
const fs = require('fs');
const path = require('path');

async function migrateProfessionalStructure() {
  const connection = await pool.getConnection();
  
  try {
    console.log('üöÄ D√©but de la migration vers la structure professionnelle...');
    
    // Lire le fichier SQL
    const sqlFile = path.join(__dirname, 'create_professional_structure.sql');
    const sqlContent = fs.readFileSync(sqlFile, 'utf8');
    
    // Diviser les requ√™tes par ';' et ex√©cuter une par une
    const queries = sqlContent
      .split(';')
      .map(query => query.trim())
      .filter(query => query.length > 0 && !query.startsWith('--') && !query.startsWith('CREATE INDEX'));
    
    console.log(`üìù Ex√©cution de ${queries.length} requ√™tes CREATE TABLE...`);
    
    for (const query of queries) {
      if (query.trim()) {
        try {
          await connection.execute(query);
          console.log('‚úÖ Table cr√©√©e avec succ√®s');
        } catch (error) {
          if (error.code === 'ER_TABLE_EXISTS_ERROR') {
            console.log('‚ö†Ô∏è  Table d√©j√† existante, ignor√©e');
          } else {
            console.error('‚ùå Erreur lors de la cr√©ation de la table:', error.message);
            console.log('Requ√™te:', query.substring(0, 100) + '...');
          }
        }
      }
    }
    
    // Ex√©cuter les index s√©par√©ment
    console.log('üîó Cr√©ation des index...');
    const indexQueries = sqlContent
      .split(';')
      .map(query => query.trim())
      .filter(query => query.startsWith('CREATE INDEX'));
    
    for (const query of indexQueries) {
      if (query.trim()) {
        try {
          await connection.execute(query);
          console.log('‚úÖ Index cr√©√© avec succ√®s');
        } catch (error) {
          if (error.code === 'ER_DUP_KEYNAME') {
            console.log('‚ö†Ô∏è  Index d√©j√† existant, ignor√©');
          } else {
            console.error('‚ùå Erreur lors de la cr√©ation de l\'index:', error.message);
          }
        }
      }
    }
    
    // Ins√©rer des domaines d'exemple
    console.log('üìö Insertion des domaines d\'exemple...');
    
    const domains = [
      {
        name: 'Sant√©',
        description: 'Formations m√©dicales et param√©dicales',
        icon: 'heart-pulse',
        color: '#dc3545'
      },
      {
        name: 'Technologies de l\'Information',
        description: 'D√©veloppement, cybers√©curit√©, intelligence artificielle',
        icon: 'laptop-code',
        color: '#0d6efd'
      },
      {
        name: 'Gestion et Management',
        description: 'Leadership, gestion de projet, ressources humaines',
        icon: 'users-cog',
        color: '#198754'
      },
      {
        name: 'Finance et Comptabilit√©',
        description: 'Analyse financi√®re, comptabilit√©, audit',
        icon: 'chart-line',
        color: '#fd7e14'
      },
      {
        name: '√âducation et Formation',
        description: 'P√©dagogie, formation professionnelle, e-learning',
        icon: 'graduation-cap',
        color: '#6f42c1'
      }
    ];
    
    for (const domain of domains) {
      try {
        await connection.execute(
          'INSERT INTO domains (name, description, icon, color) VALUES (?, ?, ?, ?)',
          [domain.name, domain.description, domain.icon, domain.color]
        );
        console.log(`‚úÖ Domaine "${domain.name}" cr√©√©`);
      } catch (error) {
        if (error.code === 'ER_DUP_ENTRY') {
          console.log(`‚ö†Ô∏è  Domaine "${domain.name}" existe d√©j√†`);
        } else {
          console.error(`‚ùå Erreur cr√©ation domaine "${domain.name}":`, error.message);
        }
      }
    }
    
    // Ins√©rer des modules d'exemple
    console.log('üìñ Insertion des modules d\'exemple...');
    
    const modules = [
      {
        domain_id: 1, // Sant√©
        title: 'Cardiologie Fondamentale',
        description: 'Module complet sur les maladies cardiovasculaires',
        short_description: 'Apprenez les bases de la cardiologie',
        duration_hours: 40,
        difficulty: 'intermediate',
        price: 299.99
      },
      {
        domain_id: 1, // Sant√©
        title: 'Neurologie Clinique',
        description: 'Diagnostic et traitement des troubles neurologiques',
        short_description: 'Formation en neurologie clinique',
        duration_hours: 35,
        difficulty: 'advanced',
        price: 399.99
      },
      {
        domain_id: 2, // IT
        title: 'D√©veloppement Web Full-Stack',
        description: 'Devenir d√©veloppeur web complet',
        short_description: 'Formation compl√®te d√©veloppement web',
        duration_hours: 120,
        difficulty: 'beginner',
        price: 599.99
      },
      {
        domain_id: 2, // IT
        title: 'Cybers√©curit√© Avanc√©e',
        description: 'Protection des syst√®mes d\'information',
        short_description: 'Expert en cybers√©curit√©',
        duration_hours: 80,
        difficulty: 'advanced',
        price: 799.99
      }
    ];
    
    for (const module of modules) {
      try {
        await connection.execute(
          `INSERT INTO modules (domain_id, title, description, short_description, 
           duration_hours, difficulty, price) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [module.domain_id, module.title, module.description, module.short_description,
           module.duration_hours, module.difficulty, module.price]
        );
        console.log(`‚úÖ Module "${module.title}" cr√©√©`);
      } catch (error) {
        if (error.code === 'ER_DUP_ENTRY') {
          console.log(`‚ö†Ô∏è  Module "${module.title}" existe d√©j√†`);
        } else {
          console.error(`‚ùå Erreur cr√©ation module "${module.title}":`, error.message);
        }
      }
    }
    
    console.log('üéâ Migration vers la structure professionnelle termin√©e !');
    console.log('');
    console.log('üìä R√©sum√© de la nouvelle structure :');
    console.log('üè• Domaines (Secteurs professionnels)');
    console.log('üìö Modules (Regroupement de cours)');
    console.log('üìñ Cours (Contenu p√©dagogique)');
    console.log('üìù S√©quences (Structure du contenu)');
    console.log('üìÑ Contenus (PDF, Vid√©os, Live)');
    console.log('‚úÖ Mini-contr√¥les (Quiz de s√©quences)');
    console.log('üèÜ √âvaluations de module (Certifications)');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
  } finally {
    connection.release();
    process.exit(0);
  }
}

migrateProfessionalStructure();
